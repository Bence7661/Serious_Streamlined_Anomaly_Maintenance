local degrade_factor = 0.2


----------------------------------------------------------------------
GUI = nil -- instance, don't touch
function start(obj, sec)
	if (not obj) then
		printf("!ERROR item_repair | no game object passed!")
		return
	end
	
	if (not sec) then
		sec = obj:section()
	end
	
	local hud = get_hud()
	if (hud) then
		hide_hud_inventory()
	end
	
	if (not GUI) then
		GUI = UIRepair()
	end
	
	if (GUI) and (not GUI:IsShown()) then
		GUI:Reset(obj, sec)
		GUI:ShowDialog(true)
		Register_UI("UIRepair","item_repair")
	end
end

----------------------------------------------------------------------
-- UI
----------------------------------------------------------------------
class "UIRepair" (CUIScriptWnd)

function UIRepair:__init(obj,section) super()
	self.section = section
	self.obj = obj

	self.available_sup_items = {}
	self.selected_sup_items = {}

	--Kit and uses
	self.kits = 
	{
		actual = "",		--object
		uses = "",			--int
		depleted = false	-- bool, will set manually when last use procced.
	}

	self.amount_of_repairs = 0
	
	-- Reload settings
	self.clr_b = utils_xml.get_color("pda_blue")

	self:InitControls()
	self:InitCallBacks()
end

function UIRepair:__finalize()
end

function UIRepair:InitControls()
	self:SetWndRect			(Frect():set(0,0,1024,768))
	self:SetAutoDelete(true)
	self.xml				= CScriptXmlInit()
	local xml = self.xml
	xml:ParseFile			("ui_batchmaintain_16.xml")
	
	self.dialog					= xml:InitStatic("repair", self)
	xml:InitStatic("repair:background", self.dialog)
	self.cap_menu 					= xml:InitTextWnd("repair:cap_tab" , self.dialog)
	self.cap           = {}
	self.b_item        = {}
	self.list          = {} -- List of items
	self.cell_item      = {} -- Item's Icon
	self.text_item     = {} -- Item's Name
	self.con_txt       = {}
	self.CC            = {}

	self.cell_item[1]         = utils_ui.UICellItem( {path="container" , xml=xml} , { path="repair:box_item_1", base= self.dialog } )
	self.cell_item[1].disable_bar = true

	for i=1,4 do
		self.b_item[i]            = xml:InitStatic("repair:back_item_" .. tostring(i) , self.dialog)
	end

	for i=1,3 do
		self.cap[i]               = xml:InitStatic("repair:cap_repair_" .. tostring(i),self.dialog)
	end

	self.con_txt           = xml:InitTextWnd("repair:con_item_1", self.dialog)

	for i=1,2 do
		self.text_item[i]         = xml:InitTextWnd("repair:text_item_" .. tostring(i) , self.dialog)


		self.CC[i]                = utils_ui.UICellContainer(i, self, nil, "repair:cont_inv_" .. tostring(i), self.dialog)
		self.CC[i].can_select	  = true
		self.CC[i].disable_drag   = true
		self.CC[i]:SetGridSpecs(35, 2)
	end

	--Selected supp materials container
	self.CC[3]                = utils_ui.UICellContainer(3, self, nil, "repair:selected_supp_mats", self.dialog)
	self.CC[3].can_select	  = true
	self.CC[3].disable_drag   = true
	self.CC[3]:SetGridSpecs(35, 2)
	--Selected supp materials container

	self.CC[2].disable_bar = true
	-- self.con_txt_base = xml:InitTextWnd("repair:con_item_base" , self.dialog)
	self.con_txt_new = xml:InitTextWnd("repair:con_item_1_new" , self.dialog)

	-- Statistics
	self.repair_kit_base = xml:InitTextWnd("repair:repair_kit_base" , self.dialog)
	self.repairs_needed = xml:InitTextWnd("repair:repairs_needed" , self.dialog)
	self.total_sup_item_bonus = xml:InitTextWnd("repair:total_sup_item_bonus" , self.dialog)
	self.sup_bonus_breakdown = xml:InitTextWnd("repair:sup_bonus_breakdown" , self.dialog)
	self.repair_items_consumed = xml:InitTextWnd("repair:repair_items_consumed" , self.dialog)
	self.repairs_breakdown = xml:InitTextWnd("repair:repairs_breakdown" , self.dialog)
	
	self.item_info = utils_ui.UIInfoItem(self, 1000)
	
	-- Main Buttons
	self.btn_repair = xml:Init3tButton("repair:btn_repair", self.dialog)
	self:Register(self.btn_repair,"btn_repair")
	
	self.btn_cancel = xml:Init3tButton("repair:btn_back", self.dialog)
	self:Register(self.btn_cancel,"btn_cancel")

	-- DEBUG
	-- self.debug_element = xml:Init3tButton("repair:debug_element", self.dialog)
	-- DEBUG
end

function UIRepair:InitCallBacks()
	self:AddCallback("btn_repair", ui_events.BUTTON_CLICKED, self.OnBatchRepair, self)
	self:AddCallback("btn_cancel", ui_events.BUTTON_CLICKED, self.OnCancel, self)
end

function UIRepair:Reset(obj,section)
	self.section = section
	self.obj = obj
	
	-- Settings
	self.repair_frame      = ini_sys:r_string_ex(section,"repair_ui") or "ui_itm_repair_1"
	self.use_condition     = ini_sys:r_bool_ex(section,"use_condition") or false
	self.min_condition     = ini_sys:r_float_ex(section,"repair_min_condition") or 0
	self.max_condition     = ini_sys:r_float_ex(section,"repair_max_condition") or 0
	self.add_condition     = ini_sys:r_float_ex(section,"repair_add_condition") or 0
	self.part_bonus        = ini_sys:r_float_ex(section,"repair_part_bonus") or 0
	self.use_parts         = ini_sys:r_bool_ex(section,"repair_use_parts") or false
	self.repair_type       = ini_sys:r_string_ex(section,"repair_type") or "all" 
	self.repair_only       = parse_list(ini_sys,section,"repair_only",true)
	self.parts_multi       = ini_sys:r_float_ex(section,"repair_parts_multi") or 1
	self.parts_sections    = parse_list(ini_sys,section,"repair_parts_sections",true)
	self.parts_match       = ini_sys:r_bool_ex(section,"repair_parts_match",false)
	self.use_actor_effects = ini_sys:r_bool_ex(section,"repair_use_actor_effects",false)
	self.con_val           = {}
	
	-- Elements
	self.available_sup_items = {}
	self.selected_sup_items = {}
	self.CC[2]:Reset()
--SELECTED SUPP ITEMS
	self.available_sup_items = {}
	self.selected_sup_items = {}
	self.CC[3]:Reset()
--SELECTED SUPP ITEMS
	self.con_txt:SetText("")
	-- self.con_txt[2]:SetText("")
	self.text_item[1]:SetText("")
	self.text_item[2]:SetText("")
	self.cell_item[1]:Reset()
	-- self.cell_item[2]:Reset()
	-- self.con_txt_base:SetText("")
	self.con_txt_new:SetText("")
	self.btn_repair:Enable(false)
	
	local to_show = self.use_parts and true or false
	self.cap[2]:Show(to_show)
	self.b_item[2]:Show(to_show)
	self.b_item[3]:Show(to_show)
	self.b_item[4]:Show(to_show)
	self.text_item[2]:Show(to_show)
	-- self.con_txt[2]:Show(to_show)
	self.CC[2]:Show(to_show)
	self.CC[3]:Show(to_show)
	
	-- Set Repair kit name
	self.cap_menu:SetText(ui_item.get_sec_name(self.section))
	
	self.repair_kit_base:SetText("Base: " .. utils_xml.get_color("pda_white") .. "+" .. tostring(self.add_condition * 100) .. "%")
	self.repairs_needed:SetText("Repairs needed: -")
	self.total_sup_item_bonus:SetText("Total support item bouns: -")
	self.sup_bonus_breakdown:SetText("Breakdown: -")
	self.repair_items_consumed:SetText("Items consumed: -")
	self.repairs_breakdown:SetText("Repairs breakdown: -")
	self.repair_kit_base:Show(true)
	self.repairs_needed:Show(true)
	self.total_sup_item_bonus:Show(true)
	self.sup_bonus_breakdown:Show(true)
	self.repair_items_consumed:Show(true)
	self.repairs_breakdown:Show(true)

	-- Show damaged items
	self:InitInventory(1)

	-- Hide active item
	actor_effects.toggle_active_slot(0) 
	
	-- Play sound
	if (self.repair_frame == "ui_itm_repair_1") or (self.repair_frame == "ui_itm_repair_2") then
		utils_obj.play_sound("interface\\inv_zipper_open")
	else
		utils_obj.play_sound("interface\\inv_briefcase_light_open")
	end
end

function UIRepair:InitInventory(n)
	local inv = {}
	-- self.available_suppitems = {}
	-- self.info_available_suppitems = {}
	-- self.selected_suppitems = {}
	-- self.info_selected_suppitems = {}
	self.available_sup_items = {}
	self.selected_sup_items = {}
	local size_t = 0
	
	-- Compatible weapons list to repair
	if n == 1 then
	self.kits = {}
		db.actor:iterate_inventory( function(owner, obj)

			if (obj:section() == self.obj:section()) then
				printf("InitInventory object sect: %s, self.object: ", obj:section(), self.obj:section())
				self.kits[#self.kits+1] = { actual = obj, uses = obj:get_remaining_uses(), depleted = false}
			end

			local sec = obj:section()
			local main_section = ini_sys:r_string_ex(sec,"repair_type") or sec
			if (self.repair_only and self.repair_only[main_section]) then
				local con = math.ceil(obj:condition() * 100)
				if (con and con >= (self.min_condition * 100) and con <= self.max_condition * 100) then
					size_t = size_t + 1
					inv[size_t] = obj
				end
			end
		end)
		
		self.CC[1]:Reinit(inv)

	-- Compatible part list to use
	elseif n == 2 then
		local obj_s = self.CC[1]:GetCell_Selected(true)
		if (not obj_s) then
			return
		end

		db.actor:iterate_inventory( function(owner, obj) --initialize inv
			local sec = obj:section()
			if (obj) and (obj:id() ~= obj_s:id()) and (obj:id() ~= self.obj:id()) then
				if (self.parts_match and sec == obj_s:section()) then
					local part_bonus = obj:condition()
					part_bonus = (game_achievements.has_achievement("mechanized_warfare")) and (part_bonus + 0.02) or part_bonus
					part_bonus = clamp(math.floor(part_bonus*100)*self.parts_multi , 0 , 100)
				
					self.available_sup_items[#self.available_sup_items + 1] = { item = obj, item_bonus = part_bonus }
				elseif (self.parts_sections and self.parts_sections[sec]) then
					local part_bonus = ini_sys:r_float_ex(sec,"repair_part_bonus") or self.part_bonus
					part_bonus = (game_achievements.has_achievement("mechanized_warfare")) and (part_bonus + 0.02) or part_bonus
					part_bonus = clamp(math.floor(part_bonus*100)*self.parts_multi , 0 , 100)
				
					self.available_sup_items[#self.available_sup_items + 1] = { item = obj, item_bonus = part_bonus }
				end
			end
		end)
		
		self.CC[2]:Reinit(self:prepareForUi(self.available_sup_items))
		
		local clr_b = utils_xml.get_color("pda_blue",true)
		local fnt = GetFontSmall()
		for idx,ci in pairs(self.CC[2].cell) do
			if ci:IsShown() then
				local con100 = ci.flags.info
				local con = ci.flags.info / 100
				ci:Add_CustomText( ("+"..con100), nil, nil, clr_b, fnt)
			end
		end
	end
end

function UIRepair:Update()
	CUIScriptWnd.Update(self)
	
	-- Warning messages timer 
	if (self.msg_wnd_timer and time_global() > self.msg_wnd_timer) then 
		self.msg_wnd_timer = nil
		self.msg_wnd:Show(false)
	end
	
	for i=1,#self.cell_item do 
		if (self.cell_item[i] and self.cell_item[i]:IsCursorOverWindow()) then
			local obj = self.CC[i]:GetCell_Selected(true)
			if (obj) then
				self.item_info:Update(obj, obj:section())
				return
			end
			
			self.item_info:Update()
			return
		end
	end
	
	-- Updating item info box and item cell containers
	local found_cell = false
	for name,cc in pairs(self.CC) do
		found_cell = cc:Update(self.item_info) or found_cell
	end
	if (not found_cell) then
		self.item_info:Update()
	end
end 

-- Callbacks
function UIRepair:On_CC_Mouse1(cont, idx)
	local ci = self.CC[cont].cell[idx]
	if ci then
		self:OnItemSelect(cont)
		if self.use_parts and cont == 1 then
			self:InitInventory(2)
		end
	end
end

function UIRepair:OnItemSelect(n)
	local obj_1 = self.CC[1]:GetCell_Selected(true)
	local obj_n = self.CC[n]:GetCell_Selected(true)
	if not (obj_1 and obj_n) then
		return
	end

	local sec = obj_n:section()
	local name = ui_item.get_sec_name(sec)
	local id = obj_n:id()
	local con = 0
	if n == 2 then
		local is_part_match = (self.parts_match and sec == obj_1:section())
		con = is_part_match and obj_n:condition() or ini_sys:r_float_ex(sec,"repair_part_bonus") or self.part_bonus
		con = (game_achievements.has_achievement("mechanized_warfare")) and (con + 0.02) or con
		con = clamp(math.floor(con*100)*self.parts_multi , 0 , 100)

		if self.amount_of_repairs == 0 or self.amount_of_repairs > #self.selected_sup_items then
			self.selected_sup_items[#self.selected_sup_items + 1] = { item = obj_n, item_bonus = self:getInfoForObject(self.available_sup_items, obj_n)}
			self:removeSupItem(self.available_sup_items, obj_n)
			self.text_item[2]:SetText("Added: " .. name)
		end
		

		self.CC[2]:Reinit(self:prepareForUi(self.available_sup_items))
		self.CC[3]:Reinit(self:prepareForUi(self.selected_sup_items))
	end
	if n == 3 then
		self.available_sup_items[#self.available_sup_items + 1] = { item = obj_n, item_bonus = self:getInfoForObject(self.selected_sup_items, obj_n)}
		self:removeSupItem(self.selected_sup_items, obj_n)
		
		self.text_item[2]:SetText("Removed: " .. name)

		self.CC[2]:Reinit(self:prepareForUi(self.available_sup_items))
		self.CC[3]:Reinit(self:prepareForUi(self.selected_sup_items))
	end

	if n ~= 3 then
		-- Text (Condition)
		self.con_val[1] = math.ceil((obj_1:condition())*100)
		self.con_val[2] = ((n == 2) and con) or 0
		self.con_val[3] = math.floor((self.add_condition)*100)
		self.con_val[4] = clamp(self.con_val[1] + self.con_val[2] + self.con_val[3], 0, 100)
		if IsItem("part",nil,obj_1) then
			self.con_val[4] = utils_item.get_cond_static(self.con_val[4])
		end
		
		self.con_txt:SetText(utils_xml.get_color_con(self.con_val[1]) .. game.translate_string("st_ui_oldcon") .. ": +" .. self.con_val[1] .. "%")
		
		-- Reset supportive item when you choose main item
		if (n == 1) and self.use_parts then
			-- Icon
			self.cell_item[1]:Set(obj_n)
			self.text_item[1]:SetText(name)
			self.text_item[2]:SetText("")
			self.selected_sup_items = {}
			self.CC[3]:Reinit({},{})
		end
	end

	table.sort(self.selected_sup_items, function(a, b)
		return a.item_bonus > b.item_bonus  -- Sort in descending order. This optimizes support item usage.
	end)

	local repairInfo = self:calculateRepairInfo(obj_1)

	self.repairs_needed:SetText("Repairs needed: " .. repairInfo[1])
	self.total_sup_item_bonus:SetText("Total support item bouns: " .. repairInfo[2] .. "%")
	self.sup_bonus_breakdown:SetText("Breakdown: " .. repairInfo[3])
	self.repair_items_consumed:SetText("Items consumed: " .. repairInfo[4])
	self.con_txt_new:SetText(utils_xml.get_color_con(repairInfo[5]) .. game.translate_string("st_ui_total") .. ": +" .. repairInfo[5] .. "%")
	self.repairs_breakdown:SetText("Repairs breakdown: " .. repairInfo[6])
	
	local clr_b = utils_xml.get_color("pda_blue",true)
	local fnt = GetFontSmall()
	for _,ci in pairs(self.CC[2].cell) do
		if ci:IsShown() then
			local con100 = ci.flags.info
			ci:Add_CustomText( ("+"..con100), nil, nil, clr_b, fnt)
		end
	end
	
	for _,ci in pairs(self.CC[3].cell) do
		if ci:IsShown() then
			local con100 = ci.flags.info
			ci:Add_CustomText( ("+"..con100), nil, nil, clr_b, fnt)
		end
	end
	
	self.btn_repair:Enable(true)
end

function UIRepair:OnRepair()
	local obj_1 = self.CC[1]:GetCell_Selected(true)
	local obj_2 = self.CC[2]:GetCell_Selected(true)

	if not (obj_1 and self.con_val[4]) then return end

	obj_1:set_condition(self.con_val[4] / 100) -- Repair main item
	if obj_2 then
		utils_item.discharge(obj_2) -- Remove 1 use of the support item
	end

	-- Remove 1 use of the repair kit
	if IsItem("multiuse",nil,self.obj) then
		utils_item.discharge(self.obj) 
	else
		utils_item.degrade(self.obj, degrade_factor)
	end
	
	-- Effect
	if (self.use_actor_effects and actor_effects) then
		actor_effects.play_item_fx(self.section.."_dummy")
	end
	
	-- Increase Statistic
	game_statistics.increment_statistic("self_repairs")
	
	-- Hide dialog
	self:OnCancel()
end

function UIRepair:OnBatchRepair()
	local damagedItem = self.CC[1]:GetCell_Selected(true)
	local kitIteration = 1

	for _, kit in ipairs(self.kits) do
		
		while not kit.depleted and damagedItem:condition() < 0.98 do
			local supItemInQueue = self.selected_sup_items[kitIteration]
			local supItemBonus = (supItemInQueue and supItemInQueue.item_bonus or 0)
			local repairAmount = supItemBonus + math.floor((self.add_condition)*100)

			if IsItem("part",nil,damagedItem) then
				repairAmount = utils_item.get_cond_static(repairAmount)
			end

			local condToSet = clamp(repairAmount + damagedItem:condition() * 100, 0, 100) / 100
			
			damagedItem:set_condition(condToSet)
	
			if IsItem("multiuse",nil,kit.actual) then
				utils_item.discharge(kit.actual)
				kit.uses = kit.uses -1

				if kit.uses <= 0 then
					kit.depleted = true
				end

			else --Will need to rethink this kit thing. Or I shouldn't allow batch parts repair
				utils_item.degrade(kit, degrade_factor)
			end

			if supItemBonus > 0 then
				if IsItem("multiuse",nil,supItemInQueue.item) then
					utils_item.discharge(supItemInQueue.item)
				else
					utils_item.degrade(supItemInQueue.item, degrade_factor)
				end
			end

			kitIteration = kitIteration + 1
		end
	end

	-- Hide dialog
	self:OnCancel()
end

function UIRepair:OnKeyboard(dik, keyboard_action)
	local res = CUIScriptWnd.OnKeyboard(self,dik,keyboard_action)
	if (res == false) then
		for i=1,#self.CC do
			if self.CC[i]:IsShown() then
				self.CC[i]:OnKeyboard(dik, keyboard_action)
			end
		end
		
		local bind = dik_to_bind(dik)
		if keyboard_action == ui_events.WINDOW_KEY_PRESSED then
			if dik == DIK_keys.DIK_ESCAPE then
				self:OnCancel()
			end
		end
	end
	return res
end

function UIRepair:OnCancel()
	utils_obj.play_sound("interface\\inv_close")
	self.available_sup_items = {}
	self.selected_sup_items = {}
	self:HideDialog()
	
	Unregister_UI("UIRepair")
end

function UIRepair:getInfoForObject(list, object)
	for _, obj in ipairs(list) do
        if obj.item:id() == object:id() then
            return obj.item_bonus
        end
    end
end

function UIRepair:removeSupItem(list, objectToRemove)
    for i, obj in ipairs(list) do
        if obj.item:id() == objectToRemove:id() then
            table.remove(list, i)
            break
        end
    end
end

function UIRepair:prepareForUi(specialObj)
    local itemList = {}
    local itemInfoList = {}

	if specialObj then
		for i, obj in ipairs(specialObj) do
			itemList[i] = obj.item
			itemInfoList[i] = obj.item_bonus
		end
	end

    return itemList, itemInfoList
end

function UIRepair:calculateRepairInfo(selectedItem)
	local repairsNeeded = 0
	local totalSupItemBonus = 0
	local supBonusBreakdown = "-"
	local repairItemsConsumed = 0
	local itemCondition = selectedItem:condition()
	local repairs_breakdown = "-"

	for i, kit in ipairs(self.kits) do
		local kitFakeUses = kit.uses
		local kitDepleted = false


		while not kitDepleted and itemCondition < 0.98 do
			repairsNeeded = repairsNeeded + 1
			
			local supItemInQueue = self.selected_sup_items[repairsNeeded]
			local supItemBonus = (supItemInQueue and supItemInQueue.item_bonus or 0)
			local repairAmount = supItemBonus + math.floor((self.add_condition)*100)
			
			totalSupItemBonus = totalSupItemBonus + supItemBonus

			if supItemInQueue then
				if repairsNeeded == 1 then
					supBonusBreakdown = "+" .. tostring(supItemBonus) .. "%"
				else
					supBonusBreakdown = string.format("%s +%s%%", supBonusBreakdown, supItemBonus)
				end
			end

			if IsItem("part",nil,damagedItem) then
				repairAmount = utils_item.get_cond_static(repairAmount)
			end

			local condToSet = clamp(repairAmount + itemCondition * 100, 0, 100) / 100
			
			local currentCondPart = " -> +" .. tostring(math.ceil(condToSet * 100)) .. "%" -- Example: "-> +24%"
			if #repairs_breakdown <= 1 then
				local initialCondStat = "+" .. tostring(math.ceil(itemCondition * 100)) .. "%" -- Example: "+50%"
				repairs_breakdown = utils_xml.get_color_con(math.ceil(itemCondition * 100)) .. initialCondStat ..  utils_xml.get_color_con(condToSet * 100) .. currentCondPart -- Example: "+50 -> +24%"
			else
				repairs_breakdown = repairs_breakdown .. utils_xml.get_color_con(condToSet * 100) .. currentCondPart
			end
			
			itemCondition = condToSet
	

			if IsItem("multiuse",nil,kit.actual) then
				kitFakeUses = kitFakeUses - 1

				if kitFakeUses <= 0 then
					kitDepleted = true
					repairItemsConsumed = repairItemsConsumed + 1
				end
			end
		end

		if itemCondition >= 0.98 then break end
	end

	self.amount_of_repairs = repairsNeeded
	if repairsNeeded == 1 then repairsNeeded = utils_xml.get_color("d_green") .. tostring(repairsNeeded)
	elseif repairsNeeded == 2 then repairsNeeded = utils_xml.get_color("yellow") .. tostring(repairsNeeded)
	elseif repairsNeeded == 3 then repairsNeeded = utils_xml.get_color("d_orange") .. tostring(repairsNeeded)
	elseif repairsNeeded > 3 then repairsNeeded = utils_xml.get_color("d_red") .. tostring(repairsNeeded)
	end


	if self.selected_sup_items[1] then -- At least 1 support item used
		totalSupItemBonus = utils_xml.get_color("d_green") .. "+" .. tostring(totalSupItemBonus)
	else
		totalSupItemBonus = utils_xml.get_color("d_red") .. "+" .. tostring(totalSupItemBonus)
	end

	if supBonusBreakdown ~= "-" then supBonusBreakdown = utils_xml.get_color("pda_blue") .. tostring(supBonusBreakdown) end

	if repairItemsConsumed == 0 then repairItemsConsumed = utils_xml.get_color("d_green") .. tostring(repairItemsConsumed)
	elseif repairItemsConsumed == 1 then repairItemsConsumed = utils_xml.get_color("yellow") .. tostring(repairItemsConsumed)
	elseif repairItemsConsumed == 2 then repairItemsConsumed = utils_xml.get_color("d_orange") .. tostring(repairItemsConsumed)
	elseif repairItemsConsumed > 2 then repairItemsConsumed = utils_xml.get_color("d_red") .. tostring(repairItemsConsumed)
	end

	-- repairs_breakdown = utils_xml.get_color("pda_blue") .. repairs_breakdown

	return
	{
		repairsNeeded,
		totalSupItemBonus,
		supBonusBreakdown,
		repairItemsConsumed,
		math.ceil(itemCondition * 100),
		repairs_breakdown,
	}
end
